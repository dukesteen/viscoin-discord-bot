// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Viscoin.Bot.Infrastructure.Data;

#nullable disable

namespace Viscoin.Bot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Viscoin.Bot.Features.Economy.Types.WordleEntry", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("WordleId")
                        .HasColumnType("integer");

                    b.HasKey("DiscordId", "WordleId");

                    b.ToTable("WordleEntries");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.InventoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("UserEntityId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId")
                        .IsUnique();

                    b.ToTable("InventoryEntity");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.InventoryItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InventoryEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryEntityId");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryItemEntity");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.InventoryPerkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InventoryEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerkId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryEntityId");

                    b.HasIndex("PerkId");

                    b.ToTable("InventoryPerkEntity");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.ItemEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemEntities");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.PerkEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PerkEntities");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Lottery.Types.Lottery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LotteryMessageChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LotteryMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("MaxTickets")
                        .HasColumnType("integer");

                    b.Property<int>("PrizePool")
                        .HasColumnType("integer");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lotteries");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Lottery.Types.LotteryEntry", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("LotteryId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketAmount")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "LotteryId");

                    b.HasIndex("LotteryId");

                    b.ToTable("LotteryEntry");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Preconditions.Cooldown.CooldownEntity", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("CommandName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastTimeRan")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "CommandName");

                    b.ToTable("Cooldowns");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Preconditions.GamblingChannel.GamblingChannel", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("ChannelId");

                    b.ToTable("GamblingChannels");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.ProvablyFair.SeedHashPair", b =>
                {
                    b.Property<string>("ServerSeed")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServerSeed");

                    b.ToTable("SeedHashes");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Statistics.Types.BalanceUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp");

                    b.Property<int>("Mutation")
                        .HasColumnType("integer");

                    b.Property<int>("ResultingBalance")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id", "Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("BalanceUpdates");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Statistics.Types.CommandExecuted", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeExecuted")
                        .HasColumnType("timestamp");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id", "TimeExecuted");

                    b.HasIndex("UserId");

                    b.ToTable("CommandsExecuted");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.User.UserEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("ClientSeed")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("NextServerSeed")
                        .HasColumnType("uuid");

                    b.Property<int>("Nonce")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServerSeed")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.InventoryEntity", b =>
                {
                    b.HasOne("Viscoin.Bot.Features.User.UserEntity", "User")
                        .WithOne("Inventory")
                        .HasForeignKey("Viscoin.Bot.Features.Inventory.Types.InventoryEntity", "UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.InventoryItemEntity", b =>
                {
                    b.HasOne("Viscoin.Bot.Features.Inventory.Types.InventoryEntity", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Viscoin.Bot.Features.Inventory.Types.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.InventoryPerkEntity", b =>
                {
                    b.HasOne("Viscoin.Bot.Features.Inventory.Types.InventoryEntity", "Inventory")
                        .WithMany("Perks")
                        .HasForeignKey("InventoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Viscoin.Bot.Features.Inventory.Types.PerkEntity", "Perk")
                        .WithMany()
                        .HasForeignKey("PerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Perk");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Lottery.Types.LotteryEntry", b =>
                {
                    b.HasOne("Viscoin.Bot.Features.Lottery.Types.Lottery", "Lottery")
                        .WithMany("Entries")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Viscoin.Bot.Features.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lottery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Statistics.Types.BalanceUpdate", b =>
                {
                    b.HasOne("Viscoin.Bot.Features.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Statistics.Types.CommandExecuted", b =>
                {
                    b.HasOne("Viscoin.Bot.Features.User.UserEntity", "User")
                        .WithMany("CommandsExecuted")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Inventory.Types.InventoryEntity", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Perks");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.Lottery.Types.Lottery", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Viscoin.Bot.Features.User.UserEntity", b =>
                {
                    b.Navigation("CommandsExecuted");

                    b.Navigation("Inventory")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
